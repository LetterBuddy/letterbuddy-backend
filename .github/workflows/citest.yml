name: CI Testing

on: 
  push: 
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9"]
    env:
        # we want to check if the code is valid for production
        DEBUG: 'False'
        # TODO remove for production and add CORS_ALLOWED_ORIGINS instead
        CORS_ORIGIN_ALLOW_ALL: 'True'
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
        IMGHIPPO_API_KEY : ${{ secrets.IMGHIPPO_API_KEY }}
    
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Cache pip requirements
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Install requirements
      run: |
        python -m pip install --upgrade pip
        pip install pylint
        pip install -r requirements.txt
    - name: Analysing the code with pylint and save report
      run: pylint $(git ls-files '*.py') | tee pylint-report-${{ matrix.python-version }}.txt || true
    
    - name: Upload pylint report as an artifact
      uses: actions/upload-artifact@v4
      with:
        name: pylint-report-${{ matrix.python-version }}
        path: pylint-report-${{ matrix.python-version }}.txt

    - name: Django migrate
      run: python manage.py migrate
    - name: Django security check for deployment
      run: python manage.py check --deploy
    - name: Run Django Tests
      run: python manage.py test --keepdb
